import streamlit as st
from pathlib import Path
import bibliotecas.own_library_st as olst
import json
import os 
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt

BASE_DIR = Path(__file__).parent
DATA_DIR = BASE_DIR / "data"
icon_path = BASE_DIR / "icon.png"

st.set_page_config(
    page_title="Storytelling Literario de Narrativa en Datos",
    page_icon= str(icon_path) if icon_path.exists() else "üìö",
    layout="wide"
    )
with st.sidebar:
    st.title("üìö Men√∫")
    categoria = st.radio(
        "Aqu√≠ puedes ver los datos con los que se trabajan:",
        options=["P√°gina Principla(Storytelling)", "Bestsellers New York Times", "Bestsellers Amazon", "Bestsellers Casa del T√≠tulo(2018-2024)", "Premios Nobel", "Premios Cervantes"],
        index=0
    )
if categoria == "P√°gina Principla(Storytelling)":
    
    # Intro
    st.write("""
        ## Las dos caras del √©xito literario: el mercado y el canon  
        Imagina que entras a una librer√≠a. A tu izquierda, una pila de ejemplares de El c√≥digo Da Vinci con un cartel que dice "M√°s de 100 millones vendidos". A tu derecha, un estante modesto con los Cuentos completos de Clarice Lispector y una medalla que reza "Premio Nobel". Dos mundos, dos formas de entender la literatura.  
        **¬øQu√© tipo de lector eres?**  
        La pregunta no es trivial. Es como elegir entre:  
        * **üçî Una hamburguesa jugosa que satisface al instante**  
        * **üç∑ Un vino reserva que exige paladar entrenado**  
        O entre:  
        * **üéµ El √©xito viral de Bad Bunny** (4.6 mil millones de streams en Spotify)  
        * **üéª La profundidad de una √≥pera de Verdi** (que perdura siglos)  
        En el cine, ser√≠a preferir:  
        * **üé• Los Vengadores** (taquilla r√©cord)  
        * **üéûÔ∏è Par√°sitos** (√ìscar a mejor pel√≠cula)  
        Durante d√©cadas nos han dicho que hay dos caminos excluyentes:  
        1. El mercado (bestsellers):  
        - Dan Brown, Stephen King, J.K. Rowling
        - F√≥rmulas narrativas probadas  
        2. El canon (premios):    
        - Toni Morrison, Jos√© Saramago, Olga Tokarczuk  
        - Innovaci√≥n ling√º√≠stica  
        - Reconocimiento acad√©mico  
        **Pero... ¬øy si es falso? ¬øexiste una relaci√≥n entre estos autores y/o obras que se ‚Äúcontraponen‚Äù?**  
             
        Primeramente, debemos entender que es un bestseller (en ingl√©s, literalmente "mejor vendido") es un t√©rmino usado en la industria editorial para referirse a T√≠tulos que han vendido una gran cantidad de ejemplares en poco tiempo.  
        Mientras que canon literario se refiere a una selecci√≥n de textos que, por su valor est√©tico, hist√≥rico, filos√≥fico o ling√º√≠stico, son considerados fundamentales dentro de una literatura nacional o universal. Lo que define que una obra o autor es un canon literario son los siguientes aspectos:  
        1.	Calidad literaria (innovaci√≥n en el lenguaje, profundidad tem√°tica, estilo).  
        2.	Influencia en otras obras, autores y movimientos.  
        3.	Reconocimiento institucional, como:  
        ‚Ä¢	Premios literarios (Nobel, Cervantes)  
        ‚Ä¢	Presencia en planes de estudio y universidades  
        ‚Ä¢	Cr√≠tica especializada y acad√©mica  
        4.	 Permanencia en el tiempo (son obras que siguen ley√©ndose y analiz√°ndose d√©cadas o siglos despu√©s de su publicaci√≥n).  
        Bestseller ‚â† Canon literario  
        Un bestseller no implica calidad literaria seg√∫n los criterios acad√©micos. Algunos bestsellers son criticados por tener f√≥rmulas comerciales (por ejemplo, After de Anna Todd), mientras que otros s√≠ tienen m√©rito literario (como Cien a√±os de soledad).
        Esto nos da los primeros destellos de solapamiento entre el canon literario y los bestsellers.
        """)
    
    #DataFrames necesarios
    df_premios = olst.df_all_p
    df_bestsellers = olst.df_all_bs 
    df_relacion_premio_bestseller_all = olst.autores_con_bestsellers
    df_relacion_premio_bestseller_eng = olst.sencillo
    
    #explicacion 1
    st.write("""""")
    
    #grafico de apoyo para explicacion 1
    fig1 = px.bar(
    df_relacion_premio_bestseller_eng,
    x='num_bestsellers',
    y='name',
    orientation='h',
    color='num_bestsellers',
    color_continuous_scale='Viridis',
    hover_data=['year', 'nationality', 'language'],
    labels={'cantidad de bestsellers': 'N√∫mero de Bestsellers', 'name': 'Autor', 'year': 'A√±o del Premio'},
    height=600
    )
    fig1.update_traces(
        hovertemplate="<b>%{y}</b><br>" +
                 "Bestsellers: %{x}<br>" +
                 "Premio: %{customdata[0]}<br>" +
                 "Nacionalidad: %{customdata[1]}<br>" +
                 "Idioma: %{customdata[2]}<extra></extra>"
                 )
    st.plotly_chart(fig1, use_container_width=True)
    
    
    #explicacion 2
    st.write()
    
    # grafico explicacion 2
    fig2 = px.scatter(
        df_relacion_premio_bestseller_eng,
        x='year',
        y='num_bestsellers',
        size='num_bestsellers',
        color='language',
        hover_name='name',
        hover_data=['nationality'],
        labels={'year': 'A√±o del Premio', 'num_bestsellers': 'Bestsellers'},
        size_max=30,
        height=500
        )
    fig2.update_traces(
        hovertemplate="<b>%{hovertext}</b><br>" +
        "A√±o: %{x}<br>" +
        "Bestsellers: %{y}<br>" +
        "Nacionalidad: %{customdata[0]}<extra></extra>"
        )
    st.plotly_chart(fig2, use_container_width=True)

    st.header("Datos Completos")
    st.dataframe(
        df_relacion_premio_bestseller_all[['name', 'year', 'nationality', 'language', 'num_bestsellers']],
        column_config={
            "name": "Autor",
            "year": "A√±o Premio",
            "nationality": "Nacionalidad",
            "language": "Idioma",
            "num_bestsellers": "Bestsellers"
        },
        hide_index=True,
        use_container_width=True
    )
    st.write("""
             A pesar que el idioma que se ve mas distribuido entre a√±os es el ingl√©s hay una mayor concentraci√≥n en espa√±ol
             """)
    idiomas_counts = df_relacion_premio_bestseller_all['language'].value_counts()
    umbral = 3 
    idiomas_principales = idiomas_counts[idiomas_counts >= umbral]
    otros = idiomas_counts[idiomas_counts < umbral].sum()
    if otros > 0:
        idiomas_final = pd.concat([idiomas_principales, pd.Series({'Otros': otros})])
    else:
        idiomas_final = idiomas_principales
    plt.figure(figsize=(10, 8))
    plt.pie(
        idiomas_final,
        labels=idiomas_final.index,
        autopct='%1.1f%%',
        startangle=90,
        colors=plt.cm.Paired.colors,
        wedgeprops={'edgecolor': 'white', 'linewidth': 1}
    )
    st.write("Existe una gran recurrencia entre autores premiados con Bestseller en espa√±ol, esto significa que los autores en habla castellana son mejor premiados o mas vendidos, o tal vez logren encontrar la f√≥rmula para ganar audiencia y a la vez innovar y tener un valor cultural significativo?")

    plt.title("Distribuci√≥n de Idiomas entre Autores Premiados y Bestsellers", fontsize=14)
    st.write("Aunque en ingles hay mucha presencia el espa√±ol revasa con creces a los demas idiomas")
    plt.axis('equal')
    plt.tight_layout()
    st.pyplot()
    
    
    
    
    
    
    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    
elif categoria == "Bestsellers New York Times":
    st.title("Recopilaci√≥n de los Bestsellers en el New York Time de 1994 a 2024")
    olst.df_nyt

elif categoria == "Bestsellers Amazon":
    st.title("Recopilaci√≥n de los Bestsellers en Amazon 1995 a 2024")
    olst.df_amazon
    
elif categoria == "Bestsellers Casa del T√≠tulo(2018-2024)":
    st.title("Recopilaci√≥n de los Bestsellers en Casa del T√≠tulo de 1994 a 2024")
    olst.df_casalibro
    
elif categoria == "Premios Nobel":
    st.title("Recopilaci√≥n de los Premios Nobel de 1994 a 2024")
    olst.df_nobel
    
elif categoria == "Premios Cervantes":
    st.title("Recopilaci√≥n de los Premios Cervantes de 1994 a 2024")
    olst.df_cervantes